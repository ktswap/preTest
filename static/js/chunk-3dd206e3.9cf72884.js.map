{"version":3,"sources":["webpack:///./node_modules/core-js/internals/string-repeat.js","webpack:///./node_modules/core-js/internals/this-number-value.js","webpack:///./node_modules/core-js/internals/whitespaces.js","webpack:///./node_modules/core-js/internals/string-trim.js","webpack:///./node_modules/bignumber.js/bignumber.js","webpack:///./node_modules/core-js/modules/es.number.constructor.js","webpack:///./node_modules/core-js/modules/es.number.to-fixed.js"],"names":["global","toIntegerOrInfinity","toString","requireObjectCoercible","RangeError","module","exports","count","str","this","result","n","Infinity","uncurryThis","valueOf","whitespaces","replace","whitespace","ltrim","RegExp","rtrim","createMethod","TYPE","$this","string","start","end","trim","globalObject","BigNumber","isNumeric","mathceil","Math","ceil","mathfloor","floor","bignumberError","tooManyDigits","BASE","LOG_BASE","MAX_SAFE_INTEGER","POWS_TEN","SQRT_BASE","MAX","clone","configObject","div","convertBase","parseNumeric","P","prototype","constructor","ONE","DECIMAL_PLACES","ROUNDING_MODE","TO_EXP_NEG","TO_EXP_POS","MIN_EXP","MAX_EXP","CRYPTO","MODULO_MODE","POW_PRECISION","FORMAT","prefix","groupSize","secondaryGroupSize","groupSeparator","decimalSeparator","fractionGroupSize","fractionGroupSeparator","suffix","ALPHABET","alphabetHasNormalDecimalDigits","v","b","alphabet","c","caseChanged","e","i","isNum","len","x","_isBigNumber","s","slice","String","test","charCodeAt","indexOf","search","substring","length","intCheck","round","DEBUG","Error","charAt","toUpperCase","toLowerCase","push","format","rm","id","c0","ne","coeffToString","toExponential","toFixedPoint","maxOrMin","args","method","m","call","normalise","j","pop","sd","r","d","k","ni","rd","xc","pows10","out","ROUND_UP","ROUND_DOWN","ROUND_CEIL","ROUND_FLOOR","ROUND_HALF_UP","ROUND_HALF_DOWN","ROUND_HALF_EVEN","ROUND_HALF_CEIL","ROUND_HALF_FLOOR","EUCLID","config","set","obj","p","hasOwnProperty","crypto","getRandomValues","randomBytes","EXPONENTIAL_AT","RANGE","isBigNumber","maximum","max","arguments","lt","minimum","min","gt","random","pow2_53","random53bitInt","dp","a","rand","Uint32Array","copy","splice","sum","plus","decimal","toBaseOut","baseIn","baseOut","arrL","arr","reverse","sign","callerIsToString","y","pow","concat","multiply","base","temp","xlo","xhi","carry","klo","khi","compare","aL","bL","cmp","subtract","more","prod","prodL","q","qc","rem","remL","rem0","xi","xL","yc0","yL","yz","yc","NaN","bitFloor","basePrefix","dotAfter","dotBefore","isInfinityOrNaN","whitespaceOrPlus","isNaN","p1","p2","absoluteValue","abs","comparedTo","decimalPlaces","dividedBy","dividedToIntegerBy","idiv","exponentiatedBy","half","isModExp","nIsBig","nIsNeg","nIsOdd","isInteger","isOdd","mod","times","integerValue","isEqualTo","eq","isFinite","isGreaterThan","isGreaterThanOrEqualTo","gte","isLessThan","isLessThanOrEqualTo","lte","isNegative","isPositive","isZero","minus","t","xLTy","xe","ye","modulo","multipliedBy","xcL","ycL","ylo","yhi","zc","sqrtBase","negated","precision","shiftedBy","squareRoot","sqrt","rep","toFixed","toFormat","split","g1","g2","intPart","fractionPart","isNeg","intDigits","substr","toFraction","md","d0","d1","d2","exp","n0","n1","toNumber","toPrecision","toJSON","z","l","name","zs","DESCRIPTORS","isForced","redefine","hasOwn","inheritIfRequired","isPrototypeOf","isSymbol","toPrimitive","fails","getOwnPropertyNames","f","getOwnPropertyDescriptor","defineProperty","thisNumberValue","NUMBER","NativeNumber","NumberPrototype","TypeError","arraySlice","toNumeric","value","primValue","argument","first","third","radix","maxCode","digits","index","code","it","parseInt","key","NumberWrapper","dummy","Object","keys","$","$repeat","repeat","stringSlice","un$ToFixed","acc","log","x2","data","c2","divide","dataToString","FORCED","target","proto","forced","fractionDigits","number","fractDigits"],"mappings":"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","file":"static/js/chunk-3dd206e3.9cf72884.js","sourcesContent":["'use strict';\nvar global = require('../internals/global');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar toString = require('../internals/to-string');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar RangeError = global.RangeError;\n\n// `String.prototype.repeat` method implementation\n// https://tc39.es/ecma262/#sec-string.prototype.repeat\nmodule.exports = function repeat(count) {\n  var str = toString(requireObjectCoercible(this));\n  var result = '';\n  var n = toIntegerOrInfinity(count);\n  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;\n  return result;\n};\n","var uncurryThis = require('../internals/function-uncurry-this');\n\n// `thisNumberValue` abstract operation\n// https://tc39.es/ecma262/#sec-thisnumbervalue\nmodule.exports = uncurryThis(1.0.valueOf);\n","// a string of all valid unicode whitespaces\nmodule.exports = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u2000\\u2001\\u2002' +\n  '\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","var uncurryThis = require('../internals/function-uncurry-this');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar toString = require('../internals/to-string');\nvar whitespaces = require('../internals/whitespaces');\n\nvar replace = uncurryThis(''.replace);\nvar whitespace = '[' + whitespaces + ']';\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\nvar rtrim = RegExp(whitespace + whitespace + '*$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod = function (TYPE) {\n  return function ($this) {\n    var string = toString(requireObjectCoercible($this));\n    if (TYPE & 1) string = replace(string, ltrim, '');\n    if (TYPE & 2) string = replace(string, rtrim, '');\n    return string;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.es/ecma262/#sec-string.prototype.trimstart\n  start: createMethod(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.es/ecma262/#sec-string.prototype.trimend\n  end: createMethod(2),\n  // `String.prototype.trim` method\n  // https://tc39.es/ecma262/#sec-string.prototype.trim\n  trim: createMethod(3)\n};\n",";(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.0.2\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2021 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) t = xc, xc = yc, yc = t, y.s = -y.s;\r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) zc = xc, xc = yc, yc = zc, i = xcL, xcL = ycL, ycL = i;\r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) t = yc, yc = xc, xc = t, b = a;\r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) i = g1, g1 = g2, g2 = i, len -= i;\r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (typeof define == 'function' && define.amd) {\r\n    define(function () { return BigNumber; });\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else if (typeof module != 'undefined' && module.exports) {\r\n    module.exports = BigNumber;\r\n\r\n  // Browser.\r\n  } else {\r\n    if (!globalObject) {\r\n      globalObject = typeof self != 'undefined' && self ? self : window;\r\n    }\r\n\r\n    globalObject.BigNumber = BigNumber;\r\n  }\r\n})(this);\r\n","'use strict';\nvar DESCRIPTORS = require('../internals/descriptors');\nvar global = require('../internals/global');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar isForced = require('../internals/is-forced');\nvar redefine = require('../internals/redefine');\nvar hasOwn = require('../internals/has-own-property');\nvar inheritIfRequired = require('../internals/inherit-if-required');\nvar isPrototypeOf = require('../internals/object-is-prototype-of');\nvar isSymbol = require('../internals/is-symbol');\nvar toPrimitive = require('../internals/to-primitive');\nvar fails = require('../internals/fails');\nvar getOwnPropertyNames = require('../internals/object-get-own-property-names').f;\nvar getOwnPropertyDescriptor = require('../internals/object-get-own-property-descriptor').f;\nvar defineProperty = require('../internals/object-define-property').f;\nvar thisNumberValue = require('../internals/this-number-value');\nvar trim = require('../internals/string-trim').trim;\n\nvar NUMBER = 'Number';\nvar NativeNumber = global[NUMBER];\nvar NumberPrototype = NativeNumber.prototype;\nvar TypeError = global.TypeError;\nvar arraySlice = uncurryThis(''.slice);\nvar charCodeAt = uncurryThis(''.charCodeAt);\n\n// `ToNumeric` abstract operation\n// https://tc39.es/ecma262/#sec-tonumeric\nvar toNumeric = function (value) {\n  var primValue = toPrimitive(value, 'number');\n  return typeof primValue == 'bigint' ? primValue : toNumber(primValue);\n};\n\n// `ToNumber` abstract operation\n// https://tc39.es/ecma262/#sec-tonumber\nvar toNumber = function (argument) {\n  var it = toPrimitive(argument, 'number');\n  var first, third, radix, maxCode, digits, length, index, code;\n  if (isSymbol(it)) throw TypeError('Cannot convert a Symbol value to a number');\n  if (typeof it == 'string' && it.length > 2) {\n    it = trim(it);\n    first = charCodeAt(it, 0);\n    if (first === 43 || first === 45) {\n      third = charCodeAt(it, 2);\n      if (third === 88 || third === 120) return NaN; // Number('+0x1') should be NaN, old V8 fix\n    } else if (first === 48) {\n      switch (charCodeAt(it, 1)) {\n        case 66: case 98: radix = 2; maxCode = 49; break; // fast equal of /^0b[01]+$/i\n        case 79: case 111: radix = 8; maxCode = 55; break; // fast equal of /^0o[0-7]+$/i\n        default: return +it;\n      }\n      digits = arraySlice(it, 2);\n      length = digits.length;\n      for (index = 0; index < length; index++) {\n        code = charCodeAt(digits, index);\n        // parseInt parses a string to a first unavailable symbol\n        // but ToNumber should return NaN if a string contains unavailable symbols\n        if (code < 48 || code > maxCode) return NaN;\n      } return parseInt(digits, radix);\n    }\n  } return +it;\n};\n\n// `Number` constructor\n// https://tc39.es/ecma262/#sec-number-constructor\nif (isForced(NUMBER, !NativeNumber(' 0o1') || !NativeNumber('0b1') || NativeNumber('+0x1'))) {\n  var NumberWrapper = function Number(value) {\n    var n = arguments.length < 1 ? 0 : NativeNumber(toNumeric(value));\n    var dummy = this;\n    // check on 1..constructor(foo) case\n    return isPrototypeOf(NumberPrototype, dummy) && fails(function () { thisNumberValue(dummy); })\n      ? inheritIfRequired(Object(n), dummy, NumberWrapper) : n;\n  };\n  for (var keys = DESCRIPTORS ? getOwnPropertyNames(NativeNumber) : (\n    // ES3:\n    'MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,' +\n    // ES2015 (in case, if modules with ES2015 Number statics required before):\n    'EPSILON,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,isFinite,isInteger,isNaN,isSafeInteger,parseFloat,parseInt,' +\n    // ESNext\n    'fromString,range'\n  ).split(','), j = 0, key; keys.length > j; j++) {\n    if (hasOwn(NativeNumber, key = keys[j]) && !hasOwn(NumberWrapper, key)) {\n      defineProperty(NumberWrapper, key, getOwnPropertyDescriptor(NativeNumber, key));\n    }\n  }\n  NumberWrapper.prototype = NumberPrototype;\n  NumberPrototype.constructor = NumberWrapper;\n  redefine(global, NUMBER, NumberWrapper);\n}\n","'use strict';\nvar $ = require('../internals/export');\nvar global = require('../internals/global');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar thisNumberValue = require('../internals/this-number-value');\nvar $repeat = require('../internals/string-repeat');\nvar fails = require('../internals/fails');\n\nvar RangeError = global.RangeError;\nvar String = global.String;\nvar floor = Math.floor;\nvar repeat = uncurryThis($repeat);\nvar stringSlice = uncurryThis(''.slice);\nvar un$ToFixed = uncurryThis(1.0.toFixed);\n\nvar pow = function (x, n, acc) {\n  return n === 0 ? acc : n % 2 === 1 ? pow(x, n - 1, acc * x) : pow(x * x, n / 2, acc);\n};\n\nvar log = function (x) {\n  var n = 0;\n  var x2 = x;\n  while (x2 >= 4096) {\n    n += 12;\n    x2 /= 4096;\n  }\n  while (x2 >= 2) {\n    n += 1;\n    x2 /= 2;\n  } return n;\n};\n\nvar multiply = function (data, n, c) {\n  var index = -1;\n  var c2 = c;\n  while (++index < 6) {\n    c2 += n * data[index];\n    data[index] = c2 % 1e7;\n    c2 = floor(c2 / 1e7);\n  }\n};\n\nvar divide = function (data, n) {\n  var index = 6;\n  var c = 0;\n  while (--index >= 0) {\n    c += data[index];\n    data[index] = floor(c / n);\n    c = (c % n) * 1e7;\n  }\n};\n\nvar dataToString = function (data) {\n  var index = 6;\n  var s = '';\n  while (--index >= 0) {\n    if (s !== '' || index === 0 || data[index] !== 0) {\n      var t = String(data[index]);\n      s = s === '' ? t : s + repeat('0', 7 - t.length) + t;\n    }\n  } return s;\n};\n\nvar FORCED = fails(function () {\n  return un$ToFixed(0.00008, 3) !== '0.000' ||\n    un$ToFixed(0.9, 0) !== '1' ||\n    un$ToFixed(1.255, 2) !== '1.25' ||\n    un$ToFixed(1000000000000000128.0, 0) !== '1000000000000000128';\n}) || !fails(function () {\n  // V8 ~ Android 4.3-\n  un$ToFixed({});\n});\n\n// `Number.prototype.toFixed` method\n// https://tc39.es/ecma262/#sec-number.prototype.tofixed\n$({ target: 'Number', proto: true, forced: FORCED }, {\n  toFixed: function toFixed(fractionDigits) {\n    var number = thisNumberValue(this);\n    var fractDigits = toIntegerOrInfinity(fractionDigits);\n    var data = [0, 0, 0, 0, 0, 0];\n    var sign = '';\n    var result = '0';\n    var e, z, j, k;\n\n    // TODO: ES2018 increased the maximum number of fraction digits to 100, need to improve the implementation\n    if (fractDigits < 0 || fractDigits > 20) throw RangeError('Incorrect fraction digits');\n    // eslint-disable-next-line no-self-compare -- NaN check\n    if (number != number) return 'NaN';\n    if (number <= -1e21 || number >= 1e21) return String(number);\n    if (number < 0) {\n      sign = '-';\n      number = -number;\n    }\n    if (number > 1e-21) {\n      e = log(number * pow(2, 69, 1)) - 69;\n      z = e < 0 ? number * pow(2, -e, 1) : number / pow(2, e, 1);\n      z *= 0x10000000000000;\n      e = 52 - e;\n      if (e > 0) {\n        multiply(data, 0, z);\n        j = fractDigits;\n        while (j >= 7) {\n          multiply(data, 1e7, 0);\n          j -= 7;\n        }\n        multiply(data, pow(10, j, 1), 0);\n        j = e - 1;\n        while (j >= 23) {\n          divide(data, 1 << 23);\n          j -= 23;\n        }\n        divide(data, 1 << j);\n        multiply(data, 1, 1);\n        divide(data, 2);\n        result = dataToString(data);\n      } else {\n        multiply(data, 0, z);\n        multiply(data, 1 << -e, 0);\n        result = dataToString(data) + repeat('0', fractDigits);\n      }\n    }\n    if (fractDigits > 0) {\n      k = result.length;\n      result = sign + (k <= fractDigits\n        ? '0.' + repeat('0', fractDigits - k) + result\n        : stringSlice(result, 0, k - fractDigits) + '.' + stringSlice(result, k - fractDigits));\n    } else {\n      result = sign + result;\n    } return result;\n  }\n});\n"],"sourceRoot":""}